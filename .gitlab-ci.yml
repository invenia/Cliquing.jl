stages:
  - test
  - coverage
  - docs

.test_shell: &test_shell
  artifacts:
    name: "$CI_JOB_NAME coverage"
    expire_in: 1 week
    paths:
      - "$CI_JOB_NAME coverage/"
  before_script:
    - curl -s -o julia-ci https://gitlab.invenia.ca/infrastructure/gitlab-ci-helper/raw/master/julia-ci
    - chmod +x julia-ci
    - ./julia-ci install $JULIA_VERSION
  script:
    - source julia-ci export
    # - export PYTHON=""  # Configure PyCall to use the Conda.jl package's Python
    - julia -e "Pkg.clone(pwd()); Pkg.build(\"$PKG_NAME\"); Pkg.test(\"$PKG_NAME\"; coverage=true)"
    - ./julia-ci coverage
  after_script:
    - ./julia-ci clean

.test_shell_06: &test_shell_06
  variables:
    JULIA_VERSION: "0.6"
  <<: *test_shell

.test_shell_07-: &test_shell_07-
  variables:
    JULIA_VERSION: "0.7-"
  allow_failure: true
  <<: *test_shell

.test_docker: &test_docker
  artifacts:
    name: "$CI_JOB_NAME coverage"
    expire_in: 1 week
    paths:
      - "$CI_JOB_NAME coverage"
  script:
    # - export PYTHON=""  # Configure PyCall to use the Conda.jl package's Python
    - julia -e "Pkg.clone(pwd()); Pkg.build(\"$PKG_NAME\"); Pkg.test(\"$PKG_NAME\"; coverage=true)"
    - julia-coverage "$PKG_NAME"


"0.6 (Mac)":
  tags:
    - mac
    - shell-ci
  <<: *test_shell_06

"0.6 (Linux, 64-bit, Docker)":
  image: 292522074875.dkr.ecr.us-east-1.amazonaws.com/julia-gitlab-ci:0.6
  tags:
    - linux
    - 64-bit
    - docker-ci
  <<: *test_docker

"0.6 (Linux, 32-bit, Shell)":
  tags:
    - linux
    - 32-bit
    - shell-ci
  <<: *test_shell_06

"0.7- (Mac)":
  tags:
    - mac
    - shell-ci
  <<: *test_shell_07-

"0.7- (Linux, 64-bit)":
  tags:
    - linux
    - 64-bit
    - shell-ci
  <<: *test_shell_07-

"0.7- (Linux, 32-bit)":
  tags:
    - linux
    - 32-bit
    - shell-ci
  <<: *test_shell_07-

"Coverage":
  stage: coverage
  image: 292522074875.dkr.ecr.us-east-1.amazonaws.com/julia-gitlab-ci:0.6
  coverage: /Test Coverage (\d+\.\d+%)/
  artifacts:
    name: combined_coverage
    expire_in: 1 week
    paths:
      - combined_coverage/
  tags:
    - linux
    - docker-ci
  script:
    - genhtml --version
    - mkdir $CI_PROJECT_DIR/combined_coverage
    - cp -r $CI_PROJECT_DIR/src $CI_PROJECT_DIR/combined_coverage/
    - ls */*.info | xargs -I{} echo '--summary "{}"' | xargs lcov --directory src
    - echo "Test Coverage $(genhtml -o $CI_PROJECT_DIR/combined_coverage --no-prefix */coverage.info 2>&1 | grep lines | awk '{print $2}')"
    - find $CI_PROJECT_DIR/combined_coverage -type f -name "*.jl" -delete

"Documentation":
  stage: docs
  tags:
    - docs
  only:
    - master
    - develop
    - docs
    - tags  # special keyword for all tags
  variables:
    JULIA_VERSION: "0.6"
  before_script:
    - curl -s -o julia-ci https://gitlab.invenia.ca/infrastructure/gitlab-ci-helper/raw/master/julia-ci
    - chmod +x julia-ci
    - ./julia-ci install $JULIA_VERSION
  script:
    - source julia-ci export
    - julia --depwarn=no -e "Pkg.clone(pwd()); Pkg.build(\"$PKG_NAME\"); Pkg.add(\"Documenter\")"
    - julia --depwarn=no -e "cd(Pkg.dir(\"$PKG_NAME\", \"docs\")); include(\"make.jl\")"
    - julia --depwarn=no -e "const DOCS_DIR = joinpath(\"/mnt\", \"docs\", \"$CI_PROJECT_NAMESPACE\", \"$CI_PROJECT_NAME\", \"$CI_BUILD_REF_NAME\"); mkpath(DOCS_DIR); cp(Pkg.dir(\"$PKG_NAME\", \"docs\", \"build\"), DOCS_DIR; remove_destination=true, follow_symlinks=true)"
  after_script:
    - ./julia-ci clean
